{
  //CUBIT And State
  "Cubit": {
    "prefix": "flcubit",
    "body": [
      "import 'package:bloc/bloc.dart';",
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "import 'package:injectable/injectable.dart';",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "part '${TM_FILENAME_BASE/(.*)cubit/$1/}state.dart'",
      "@injectable",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends Cubit<${TM_FILENAME_BASE/(.*)_cubit/${1:/pascalcase}/}State> {",
      "${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}() : super();",
      "}"
    ],
    "description": "Generate cubit code"
  },
  "Cubit State": {
    "prefix": "flstate",
    "body": [
      "part of '${TM_FILENAME_BASE/(.*)state/$1/}cubit.dart';",
      "@freezed",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} with _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
      "const factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}.initial($1) = _Initial;",
      "const factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}.loading($2) = _Loading;",
      "}"
    ]
  },
  "Flutter Freezed datamodel": {
    "prefix": "flfmodel",
    "description": "Generate freezed data model",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "part '${TM_FILENAME_BASE/(.*)/$1/}.freezed.dart';",

      "part '${TM_FILENAME_BASE/(.*)/$1/}.g.dart';",

      "@freezed",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Model with _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Model {",
      "  const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Model._();",
      "  const factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Model() = _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Model;",
      "  factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Model.fromJson(Map<String, dynamic> json) =>",
      "      _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ModelFromJson(json);",
      "}"
    ]
  },
  "Sizedbox with height": {
    "prefix": "sbh",
    "body": ["SizedBox(", "height: $1.h,", "),"],
    "description": "Sized box with height"
  },
  "Sizedbox with width": {
    "prefix": "sbw",
    "body": ["SizedBox(", "width: $1.w,", "),"],
    "description": "Sized box with width"
  },
  "Text theme variable": {
    "prefix": "flvtxt",
    "body": ["final textTheme = Theme.of(context).textTheme;"],
    "description": "Generate text theme boilerplate"
  },
  "Text theme for textstyle": {
    "prefix": "fltxt",
    "body": [" Theme.of(context).textTheme.$1"],
    "description": "Generate text theme for text Style"
  },
  "Generate mediaquery size vairable": {
    "prefix": "flvsize",
    "body": ["final Size size = MediaQuery.of(context).size$1;"],
    "description": "Generate mediaquery size variable"
  },
  "Generate mediaquery height": {
    "prefix": "flheight",
    "body": ["MediaQuery.of(context).size.height$1;"],
    "description": "Generate mediaquery width"
  },
  "Generate mediaquery width": {
    "prefix": "flwidth",
    "body": ["MediaQuery.of(context).size.width$1;"],
    "description": "Generate mediaquery width"
  }
}
